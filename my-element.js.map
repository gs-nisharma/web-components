{"version":3,"file":"my-element.js","sourceRoot":"","sources":["src/my-element.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D;;;;;;GAMG;AAEI,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QAUL;;WAEG;QAEH,SAAI,GAAG,OAAO,CAAC;QAEf;;WAEG;QAEH,UAAK,GAAG,CAAC,CAAC;QAEV,cAAc;QACd,iBAAiB;QACjB,0CAA0C;QAC1C,iCAAiC;QACjC,SAAS;QACT,gCAAgC;QAChC,qCAAqC;QACrC,QAAQ;QACR,MAAM;QACN,KAAK;QAEL,WAAM,GAAG;YACP,IAAI,EAAE,GAAG;YACT,KAAK,EAAE,CAAC;SACT,CAAA;IA0BH,CAAC;IAxBU,MAAM;QACb,OAAO,IAAI,CAAA;YACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;uBACb,IAAI,CAAC,QAAQ;uBACb,IAAI,CAAC,KAAK;;YAErB,IAAI,CAAC,MAAM,EAAE,IAAI,MAAM,IAAI,CAAC,MAAM,EAAE,KAAK;;KAEhD,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAC;IAC1B,CAAC;;AA5De,gBAAM,GAAG,GAAG,CAAA;;;;;;;GAO3B,AAPqB,CAOpB;AAMF;IADC,QAAQ,EAAE;uCACI;AAMf;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;wCACjB;AAaV;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;yCAI1B;AApCU,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CA8DrB","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  static override styles = css`\n    :host {\n      display: block;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 800px;\n    }\n  `;\n\n  /**\n   * The name to say \"Hello\" to.\n   */\n  @property()\n  name = 'World';\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property({ type: Number })\n  count = 0;\n\n  // @property({\n  //   converter: {\n  //     fromAttribute: (value: string) => {\n  //       return JSON.parse(value)\n  //     },\n  //     toAttribute: (value) => {\n  //       return JSON.stringify(value)\n  //     }\n  //   }\n  // })\n  @property({ type: Object })\n  object = {\n    name: \"m\",\n    count: 0\n  }\n\n  override render() {\n    return html`\n      <h1>${this.sayHello(this.name)}!</h1>\n      <button @click=${this._onClick} part=\"button\">\n        Click Count: ${this.count}\n      </button>\n      <h2>${this.object?.name} : ${this.object?.count}</h2>\n      <slot></slot>\n    `;\n  }\n\n  private _onClick() {\n    this.object.count++;\n    this.count++;\n    this.dispatchEvent(new CustomEvent('count-changed'));\n  }\n\n  /**\n   * Formats a greeting\n   * @param name The name to say \"Hello\" to\n   */\n  sayHello(name: string): string {\n    return `Hello, ${name}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-element': MyElement;\n  }\n}\n"]}